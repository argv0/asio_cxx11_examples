// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sample.proto

#ifndef PROTOBUF_sample_2eproto__INCLUDED
#define PROTOBUF_sample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace asio_sample {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_sample_2eproto();
void protobuf_AssignDesc_sample_2eproto();
void protobuf_ShutdownFile_sample_2eproto();

class request;
class request_get;
class request_set;
class response;

enum request_request_type {
  request_request_type_GET_VALUE = 1,
  request_request_type_SET_VALUE = 2
};
bool request_request_type_IsValid(int value);
const request_request_type request_request_type_request_type_MIN = request_request_type_GET_VALUE;
const request_request_type request_request_type_request_type_MAX = request_request_type_SET_VALUE;
const int request_request_type_request_type_ARRAYSIZE = request_request_type_request_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* request_request_type_descriptor();
inline const ::std::string& request_request_type_Name(request_request_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    request_request_type_descriptor(), value);
}
inline bool request_request_type_Parse(
    const ::std::string& name, request_request_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<request_request_type>(
    request_request_type_descriptor(), name, value);
}
// ===================================================================

class request_get : public ::google::protobuf::Message {
 public:
  request_get();
  virtual ~request_get();

  request_get(const request_get& from);

  inline request_get& operator=(const request_get& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request_get& default_instance();

  void Swap(request_get* other);

  // implements Message ----------------------------------------------

  request_get* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const request_get& from);
  void MergeFrom(const request_get& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:asio_sample.request.get)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_sample_2eproto();
  friend void protobuf_AssignDesc_sample_2eproto();
  friend void protobuf_ShutdownFile_sample_2eproto();

  void InitAsDefaultInstance();
  static request_get* default_instance_;
};
// -------------------------------------------------------------------

class request_set : public ::google::protobuf::Message {
 public:
  request_set();
  virtual ~request_set();

  request_set(const request_set& from);

  inline request_set& operator=(const request_set& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request_set& default_instance();

  void Swap(request_set* other);

  // implements Message ----------------------------------------------

  request_set* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const request_set& from);
  void MergeFrom(const request_set& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:asio_sample.request.set)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_sample_2eproto();
  friend void protobuf_AssignDesc_sample_2eproto();
  friend void protobuf_ShutdownFile_sample_2eproto();

  void InitAsDefaultInstance();
  static request_set* default_instance_;
};
// -------------------------------------------------------------------

class request : public ::google::protobuf::Message {
 public:
  request();
  virtual ~request();

  request(const request& from);

  inline request& operator=(const request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request& default_instance();

  void Swap(request* other);

  // implements Message ----------------------------------------------

  request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const request& from);
  void MergeFrom(const request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef request_get get;
  typedef request_set set;

  typedef request_request_type request_type;
  static const request_type GET_VALUE = request_request_type_GET_VALUE;
  static const request_type SET_VALUE = request_request_type_SET_VALUE;
  static inline bool request_type_IsValid(int value) {
    return request_request_type_IsValid(value);
  }
  static const request_type request_type_MIN =
    request_request_type_request_type_MIN;
  static const request_type request_type_MAX =
    request_request_type_request_type_MAX;
  static const int request_type_ARRAYSIZE =
    request_request_type_request_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  request_type_descriptor() {
    return request_request_type_descriptor();
  }
  static inline const ::std::string& request_type_Name(request_type value) {
    return request_request_type_Name(value);
  }
  static inline bool request_type_Parse(const ::std::string& name,
      request_type* value) {
    return request_request_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .asio_sample.request.request_type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::asio_sample::request_request_type type() const;
  inline void set_type(::asio_sample::request_request_type value);

  // optional .asio_sample.request.get request_get = 21;
  inline bool has_request_get() const;
  inline void clear_request_get();
  static const int kRequestGetFieldNumber = 21;
  inline const ::asio_sample::request_get& request_get() const;
  inline ::asio_sample::request_get* mutable_request_get();
  inline ::asio_sample::request_get* release_request_get();
  inline void set_allocated_request_get(::asio_sample::request_get* request_get);

  // optional .asio_sample.request.set request_set = 22;
  inline bool has_request_set() const;
  inline void clear_request_set();
  static const int kRequestSetFieldNumber = 22;
  inline const ::asio_sample::request_set& request_set() const;
  inline ::asio_sample::request_set* mutable_request_set();
  inline ::asio_sample::request_set* release_request_set();
  inline void set_allocated_request_set(::asio_sample::request_set* request_set);

  // @@protoc_insertion_point(class_scope:asio_sample.request)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_request_get();
  inline void clear_has_request_get();
  inline void set_has_request_set();
  inline void clear_has_request_set();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::asio_sample::request_get* request_get_;
  ::asio_sample::request_set* request_set_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_sample_2eproto();
  friend void protobuf_AssignDesc_sample_2eproto();
  friend void protobuf_ShutdownFile_sample_2eproto();

  void InitAsDefaultInstance();
  static request* default_instance_;
};
// -------------------------------------------------------------------

class response : public ::google::protobuf::Message {
 public:
  response();
  virtual ~response();

  response(const response& from);

  inline response& operator=(const response& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const response& default_instance();

  void Swap(response* other);

  // implements Message ----------------------------------------------

  response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const response& from);
  void MergeFrom(const response& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string value = 1;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:asio_sample.response)
 private:
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_sample_2eproto();
  friend void protobuf_AssignDesc_sample_2eproto();
  friend void protobuf_ShutdownFile_sample_2eproto();

  void InitAsDefaultInstance();
  static response* default_instance_;
};
// ===================================================================


// ===================================================================

// request_get

// required string key = 1;
inline bool request_get::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request_get::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request_get::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void request_get::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& request_get::key() const {
  return *key_;
}
inline void request_get::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void request_get::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void request_get::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request_get::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* request_get::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void request_get::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// request_set

// required string key = 1;
inline bool request_set::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request_set::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request_set::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void request_set::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& request_set::key() const {
  return *key_;
}
inline void request_set::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void request_set::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void request_set::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request_set::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* request_set::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void request_set::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 2;
inline bool request_set::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void request_set::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void request_set::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void request_set::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& request_set::value() const {
  return *value_;
}
inline void request_set::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void request_set::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void request_set::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* request_set::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* request_set::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void request_set::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// request

// required .asio_sample.request.request_type type = 1;
inline bool request::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void request::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::asio_sample::request_request_type request::type() const {
  return static_cast< ::asio_sample::request_request_type >(type_);
}
inline void request::set_type(::asio_sample::request_request_type value) {
  assert(::asio_sample::request_request_type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .asio_sample.request.get request_get = 21;
inline bool request::has_request_get() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void request::set_has_request_get() {
  _has_bits_[0] |= 0x00000002u;
}
inline void request::clear_has_request_get() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void request::clear_request_get() {
  if (request_get_ != NULL) request_get_->::asio_sample::request_get::Clear();
  clear_has_request_get();
}
inline const ::asio_sample::request_get& request::request_get() const {
  return request_get_ != NULL ? *request_get_ : *default_instance_->request_get_;
}
inline ::asio_sample::request_get* request::mutable_request_get() {
  set_has_request_get();
  if (request_get_ == NULL) request_get_ = new ::asio_sample::request_get;
  return request_get_;
}
inline ::asio_sample::request_get* request::release_request_get() {
  clear_has_request_get();
  ::asio_sample::request_get* temp = request_get_;
  request_get_ = NULL;
  return temp;
}
inline void request::set_allocated_request_get(::asio_sample::request_get* request_get) {
  delete request_get_;
  request_get_ = request_get;
  if (request_get) {
    set_has_request_get();
  } else {
    clear_has_request_get();
  }
}

// optional .asio_sample.request.set request_set = 22;
inline bool request::has_request_set() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void request::set_has_request_set() {
  _has_bits_[0] |= 0x00000004u;
}
inline void request::clear_has_request_set() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void request::clear_request_set() {
  if (request_set_ != NULL) request_set_->::asio_sample::request_set::Clear();
  clear_has_request_set();
}
inline const ::asio_sample::request_set& request::request_set() const {
  return request_set_ != NULL ? *request_set_ : *default_instance_->request_set_;
}
inline ::asio_sample::request_set* request::mutable_request_set() {
  set_has_request_set();
  if (request_set_ == NULL) request_set_ = new ::asio_sample::request_set;
  return request_set_;
}
inline ::asio_sample::request_set* request::release_request_set() {
  clear_has_request_set();
  ::asio_sample::request_set* temp = request_set_;
  request_set_ = NULL;
  return temp;
}
inline void request::set_allocated_request_set(::asio_sample::request_set* request_set) {
  delete request_set_;
  request_set_ = request_set;
  if (request_set) {
    set_has_request_set();
  } else {
    clear_has_request_set();
  }
}

// -------------------------------------------------------------------

// response

// required string value = 1;
inline bool response::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void response::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void response::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void response::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& response::value() const {
  return *value_;
}
inline void response::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void response::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void response::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* response::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* response::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void response::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace asio_sample

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::asio_sample::request_request_type>() {
  return ::asio_sample::request_request_type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_sample_2eproto__INCLUDED
